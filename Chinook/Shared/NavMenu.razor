@using Chinook.Models
@using Chinook.Database.Persistence
@using System.Security.Claims;
@inject IUserPlaylistRepository _userPlaylist;
@inject NavigationManager NavigationManager;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>

        @*Loop over user's playlist*@
        @foreach (var playlist in UserPlaylists)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"playlist/{playlist.PlaylistId}")" Match="NavLinkMatch.All">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@playlist.Playlist.Name
                    <a href="" Match="NavLinkMatch.All" class="m-1" title="Remove playlist" @onclick="@(() => RemovePlaylist(@playlist.PlaylistId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>

                </NavLink>
            </div>
        }

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string UserId;

    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private List<UserPlaylist> UserPlaylists = new List<UserPlaylist>();

    protected override async Task OnInitializedAsync()
    {
        var UserId = await GetUserId();
        await InvokeAsync(StateHasChanged);
        UserPlaylists = await _userPlaylist.GetAllPlaylists(UserId);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    private async void RemovePlaylist(long PlaylistId)
    {
        var UserId = await GetUserId();
        var status = await _userPlaylist.RemovePlaylist(UserId, PlaylistId);
        await OnInitializedAsync();
    }
    

    #region General Methods

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    #endregion
}
