@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@using Chinook.Database.Persistence
@inject IArtistRepository _artist;
@inject IPlaylistRepository _playlist;
@inject IUserPlaylistRepository _userPlaylist;
@inject ITrackRepository _track;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string UserId;
    private List<Playlist> Playlists;
    private string PlaylistName;
    private long? SelectedPlaylist;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        UserId = await GetUserId();
        Artist = await _artist.GetArtist(ArtistId);
        Tracks = await _artist.GetTracks(UserId, ArtistId);
        Playlists = await _playlist.GetAllPlaylist();
        SelectedPlaylist = null;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private async void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        UserId = await GetUserId();

        if (SelectedPlaylist == null)
        {
            var newPlaylist = await _playlist.AddPlaylist(PlaylistName);
            SelectedPlaylist = newPlaylist.PlaylistId;
        }

        var status = await _track.AddTrack(SelectedPlaylist.GetValueOrDefault(), SelectedTrack.TrackId);
        if (status)
        {
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist.";
        }
        else
        {
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} already exists in playlist.";
        }

        var userPlaylist = await _userPlaylist.GetPlaylist(UserId, SelectedPlaylist.GetValueOrDefault());
        if (userPlaylist == null)
        {
            userPlaylist = await _userPlaylist.AddPlaylist(new UserPlaylist { UserId = UserId, PlaylistId = SelectedPlaylist.GetValueOrDefault() });
        }
        PlaylistDialog.Close();
        SelectedPlaylist = null;
        PlaylistName = "";
        SelectedTrack = null;
    }

    

    #region General Methods

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
    #endregion
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
    
        <InputSelect id="playlist_dd" @bind-Value="SelectedPlaylist">
            @foreach (var playlist in Playlists)
            {
                <option value="@playlist.PlaylistId">@playlist.Name</option>
            }
        </InputSelect>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="PlaylistName" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
